<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++11 nullptr/智能指针</title>
    <link href="/2025/06/17/C++11%2002%20C++11%20nullptr%20l%20%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <url>/2025/06/17/C++11%2002%20C++11%20nullptr%20l%20%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h2 id="一、nullptr"><a href="#一、nullptr" class="headerlink" title="一、nullptr"></a>一、nullptr</h2><p>传统的<code>NULL</code>被定为为<code>0</code>或者<code>(void*)0</code>,存在二义性，因此引入<code>nullptr</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span> </span>&#123;std::cout&lt;&lt;<span class="hljs-string">&quot;int&quot;</span>&lt;&lt;std::endl;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span>*)</span> </span>&#123;std::cout&lt;&lt;<span class="hljs-string">&quot;int *&quot;</span>&lt;&lt;std::endl;&#125;<br><br><span class="hljs-built_in">func</span>(<span class="hljs-literal">NULL</span>);<span class="hljs-comment">// 可能调用的是func(int), 而非func(int*)</span><br><span class="hljs-built_in">func</span>(nullpter);<span class="hljs-comment">// 明确调用func(int*)</span><br></code></pre></td></tr></table></figure><h2 id="二、std-unique-ptr"><a href="#二、std-unique-ptr" class="headerlink" title="二、std::unique_ptr"></a>二、std::unique_ptr</h2><h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1 特点"></a>1 特点</h3><ul><li>独占式，同一时间只有一个<code>unique_ptr</code>指向资源</li><li>不可拷贝（删除拷贝构造函数和赋值运算符），可使用移动语义转移资源的所有权</li></ul><h3 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2 注意事项"></a>2 注意事项</h3><ul><li>避免使用同一个原始指针初始化多个<code>unique_ptr</code>,会导致原始指针被多次释放；</li><li>不手动释放使用<code>get()</code>获取的原始指针；</li><li>尽量避免在同一对象上混用原始指针和智能指针，这可能导致双重释放或其他未定义行为。</li></ul><h3 id="3-用法"><a href="#3-用法" class="headerlink" title="3 用法"></a>3 用法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 构造</span><br>std::unique_ptr&lt;<span class="hljs-type">int</span>&gt; ptr = std::<span class="hljs-built_in">make_unique</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">10</span>);<span class="hljs-comment">// 推荐，C++14以上</span><br><span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ptr1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>(<span class="hljs-number">100</span>))</span></span>;<br><span class="hljs-comment">// 转移资源所有权</span><br><span class="hljs-keyword">auto</span> ptr2 = std::<span class="hljs-built_in">move</span>(ptr);<br><span class="hljs-comment">// 自定义删除器</span><br><span class="hljs-keyword">auto</span> funcDeleter = [](FILE* f)&#123;<span class="hljs-built_in">fclose</span>(f);&#125;<br><span class="hljs-function">std::unique_ptr&lt;FILE, <span class="hljs-title">decltype</span><span class="hljs-params">(funcDeleter)</span>&gt; <span class="hljs-title">fptr</span><span class="hljs-params">(fopen(<span class="hljs-string">&quot;log.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>), funcDeleter)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="3-经典使用场景"><a href="#3-经典使用场景" class="headerlink" title="3 经典使用场景"></a>3 经典使用场景</h3><ul><li><strong>资源独占管理</strong>：保证资源在作用域结束后就释放</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> resource = std::<span class="hljs-built_in">make_unique</span>&lt;Resource&gt;();<br>    resource-&gt;<span class="hljs-built_in">doWork</span>();<br>    <span class="hljs-comment">// 自动释放 Resource</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>工厂模式</strong>：返回动态创建的对象，明确所有权转移。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::unique_ptr&lt;Shape&gt; <span class="hljs-title">createShape</span><span class="hljs-params">(ShapeType type)</span> </span>&#123;<br>    <span class="hljs-keyword">switch</span>(type) &#123;<br>        <span class="hljs-keyword">case</span> Circle: <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">make_unique</span>&lt;Circle&gt;();<br>        <span class="hljs-keyword">case</span> Square: <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">make_unique</span>&lt;Square&gt;();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、std-shared-ptr"><a href="#三、std-shared-ptr" class="headerlink" title="三、std::shared_ptr"></a>三、std::shared_ptr</h2><h3 id="1-特点-1"><a href="#1-特点-1" class="headerlink" title="1 特点"></a>1 特点</h3><ul><li>计数式， 多个<code>shared_ptr</code>同时指向一个资源</li><li>引用计数操作是线程安全，<code>shared_ptr</code>指向的资源不是，需手动同步</li></ul><h3 id="2-注意事项-1"><a href="#2-注意事项-1" class="headerlink" title="2 注意事项"></a>2 注意事项</h3><ul><li>避免多个包含<code>shared_ptr</code>成员的对象互相引用，防止计数不能归零而导致内存泄漏，解决办法使用<code>weak_ptr</code>替换<code>shared_ptr</code>（比如：双向链表）;</li><li>避免使用同一个原始指针初始化多个<code>shared_ptr</code>,会导致原始指针被多次释放。</li><li>尽量避免在同一对象上混用原始指针和智能指针，这可能导致双重释放或其他未定义行为</li></ul><h3 id="3-用法-1"><a href="#3-用法-1" class="headerlink" title="3 用法"></a>3 用法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 构造</span><br>std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; ptr = std::<span class="hljs-built_in">make_shared</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">10</span>);<span class="hljs-comment">// 推荐，C++14以上</span><br><span class="hljs-function">std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ptr1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>(<span class="hljs-number">10</span>))</span></span>;<br><span class="hljs-comment">// 共享所有全，计数+1</span><br><span class="hljs-keyword">auto</span> ptr2 = ptr;<br><span class="hljs-comment">// 自定义删除器</span><br><span class="hljs-function">std::shared_ptr&lt;FILE&gt; <span class="hljs-title">fptr</span><span class="hljs-params">(fopen(<span class="hljs-string">&quot;log.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>), [](FILE* f)&#123;fclose(f);&#125;)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="4-经典使用场景"><a href="#4-经典使用场景" class="headerlink" title="4 经典使用场景"></a>4 经典使用场景</h3><ul><li><p><strong>共享资源</strong>：多线程或者多对象享同一个数据；</p></li><li><p><strong>缓存系统</strong>：缓存对象直到所有用户不存在再释放。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">CacheItem</span>&#123;<span class="hljs-comment">//...&#125;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span>&#123;<br>    std::map&lt;std::string, std::shared_ptr&lt;CacheItem&gt;&gt; m_caches;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-std-enable-shared-from-this和shared-from-this-使用"><a href="#5-std-enable-shared-from-this和shared-from-this-使用" class="headerlink" title="5 std::enable_shared_from_this和shared_from_this()使用"></a>5 std::enable_shared_from_this和shared_from_this()使用</h3><h4 id="（1）使用场景和目的"><a href="#（1）使用场景和目的" class="headerlink" title="（1）使用场景和目的"></a>（1）使用场景和目的</h4><table><thead><tr><th>使用场景</th><th>目的</th></tr></thead><tbody><tr><td>异步回调（如网络库、线程池）</td><td>确保对象在回调执行期间不被销毁</td></tr><tr><td>定时器、事件循环</td><td>确保对象在回调执行期间不被销毁</td></tr><tr><td>对象间互相持有 shared_ptr（打破循环引用）</td><td>A 持有 B 的 weak_ptr，B 调用 shared_from_this() 提供给 A</td></tr><tr><td>注册监听器&#x2F;观察者模式</td><td>确保监听器在通知时仍然有效</td></tr></tbody></table><h4 id="（2）举例说明"><a href="#（2）举例说明" class="headerlink" title="（2）举例说明"></a>（2）举例说明</h4><p>假如我们有个<code>MyClass</code>类，其中<code>doAsyncWork（）</code>函数会异步执行耗时工作,如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doAsyncWork</span><span class="hljs-params">()</span> </span>&#123; std::<span class="hljs-built_in">thread</span>([<span class="hljs-keyword">this</span>]()&#123; <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">doSomething</span>();&#125;).<span class="hljs-built_in">detach</span>(); &#125;    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">/* 耗时工作 */</span>  &#125;<br>&#125;<br><br><span class="hljs-keyword">auto</span> obj = std::<span class="hljs-built_in">make_shared</span>&lt;MyClass&gt;();<br>obj-&gt;<span class="hljs-built_in">doAsyncWork</span>(); <br></code></pre></td></tr></table></figure><ul><li><p><strong>问题</strong>：如果<code>doAsyncWork()</code>还没执行完，外部所有的<code>std::make_shared&lt;MyClass&gt;</code>提前离开作用域，导致<code>MyClass</code>被释放，此时<code>doAsyncWork()</code>内部的<code>this</code>指针将变成悬空指针。</p></li><li><p><strong>解决思路</strong>：<code>doAsyncWork()</code>函数内持有一个<code>std::shared_ptr&lt;MyClass&gt;</code>延长<code>doAsyncWork()</code>函数内<code>this</code>的生命周期</p><ul><li>错误方法：在<code>doAsyncWork()</code>函数内直接<code>std::shared_ptr&lt;MyClass&gt; self(this)</code>,这样会使<code>self</code>和<code>obj</code>各自维护自己的引用计数，导致多次析构。</li><li>正确方法：让<code>MyClass</code>继承自<code>std::enable_shared_from_this</code>并在<code>doAsyncWork()</code>函数内调用<code>shared_from_this()</code>函数获取一个<code>std::shared_ptr&lt;MyClass&gt;</code>实列。</li></ul></li></ul><p>&#x3D;&#x3D;注意&#x3D;&#x3D;：避免在构造函数内使用<code>shared_from_this()</code>,因为此时对象尚未完全构造完毕，可能会导致未定义行为</p><h2 id="四、std-weak-ptr"><a href="#四、std-weak-ptr" class="headerlink" title="四、std::weak_ptr"></a>四、std::weak_ptr</h2><h3 id="1-特点-2"><a href="#1-特点-2" class="headerlink" title="1 特点"></a>1 特点</h3><ul><li>仅观察资源，不增加引用计数，不管理资源生命周期；</li><li><code>std::weak_ptr</code>主要用于解决<code>std::shared_ptr</code>的循环引用问题，因此必须结合<code>std::shared_ptr</code>一起使用。</li></ul><h3 id="2-注意事项-2"><a href="#2-注意事项-2" class="headerlink" title="2 注意事项"></a>2 注意事项</h3><ul><li>不能直接使用<code>std::weak_ptr</code>访问资源，需先用<code>lock()</code>函数转为<code>std::shared_ptr</code>先;</li><li>因为<code>std::weak_ptr</code>不参与资源生命周期的管理，使用前需转为<code>std::shared_ptr</code>并检查其有效性。</li></ul><h3 id="3-用法-2"><a href="#3-用法-2" class="headerlink" title="3 用法"></a>3 用法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 构造</span><br><span class="hljs-keyword">auto</span> sptr = std::<span class="hljs-built_in">make_shared</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">10</span>);<br>std::weak_ptr&lt;<span class="hljs-type">int</span>&gt; wptr = sptr;<br><span class="hljs-comment">// 使用前转换为std::shared_ptr并检查其有效性</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> ptr = wptr.<span class="hljs-built_in">lock</span>())&#123; <span class="hljs-comment">/* 使用ptr，其类型为std::shared_ptr */</span> &#125;<br><span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">/* 资源已经释放 */</span> &#125;  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言与框架</category>
      
      <category>C++</category>
      
      <category>C++11</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++11 Lambda匿名函数</title>
    <link href="/2025/06/17/C++11%2001%20Lambda%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    <url>/2025/06/17/C++11%2001%20Lambda%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、-核心语法"><a href="#一、-核心语法" class="headerlink" title="一、 核心语法"></a>一、 核心语法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">[capture-list](parameters)<span class="hljs-keyword">mutable</span> -&gt; <span class="hljs-keyword">return</span>-type<br>&#123;<br>    <span class="hljs-comment">// func body</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-capture-list：外部变量捕获列表"><a href="#1-capture-list：外部变量捕获列表" class="headerlink" title="1 capture-list：外部变量捕获列表"></a>1 capture-list：外部变量捕获列表</h3><table><thead><tr><th>例子</th><th>说明</th></tr></thead><tbody><tr><td>[]</td><td>不捕获任何变量</td></tr><tr><td>[&#x3D;]</td><td>值捕获所有变量</td></tr><tr><td>[&amp;]</td><td>引用捕获所有变量</td></tr><tr><td>[x]</td><td>值捕获<code>x</code>变量</td></tr><tr><td>[&amp;x]</td><td>引用捕获<code>x</code>变量（在lambda匿名函数内修改<code>x</code>影响外部<code>x</code></td></tr><tr><td>[x,&amp;y]</td><td>值捕获<code>x</code>变量，引用捕获y&#96;变量（混合捕获）</td></tr><tr><td>[&#x3D;,&amp;x]</td><td>除了<code>x</code>变量按值捕获，其他所有变量按引用捕获（混合捕获）</td></tr><tr><td>[&amp;, x]</td><td>除了<code>x</code>变量按引用捕获，其他所有变量按值捕获（混合捕获）</td></tr><tr><td>[this]</td><td>值捕获<code>this</code>指针,<code>this</code>虽然是值捕获，但是和lambda内的副本<code>this</code>指向同一内存，所有还是会影响外部<code>this</code>（对其他指针同理）</td></tr></tbody></table><h3 id="2-parameters：参数列表-可选"><a href="#2-parameters：参数列表-可选" class="headerlink" title="2 parameters：参数列表  [可选]"></a>2 parameters：参数列表  [可选]</h3><p>参数和普通函数一样，从<code>C++14</code>开始支持默认参数。</p><h3 id="3-mutable：可变规范-可选"><a href="#3-mutable：可变规范-可选" class="headerlink" title="3 mutable：可变规范  [可选]"></a>3 mutable：可变规范  [可选]</h3><p>值捕获外部变量默认是<code>const</code>成员变量(lambda底层是函数对象)，如何要修改副本的值，需要添加<code>mutable</code>来消除<code>const</code>属性。</p><h3 id="4-return-type：返回值类型-可选"><a href="#4-return-type：返回值类型-可选" class="headerlink" title="4 return-type：返回值类型  [可选]"></a>4 return-type：返回值类型  [可选]</h3><p>使用<code>-&gt;类型</code>的方式指出返回值类型，如：<code>-&gt;int</code>；当编译器自己能推导出返回值类型时（如：单条<code>return</code>或者<code>void</code>函数）可省略。</p><h3 id="5-…-：函数体"><a href="#5-…-：函数体" class="headerlink" title="5 {…}：函数体"></a>5 {…}：函数体</h3><p>实现函数功能逻辑。</p><h2 id="二、注意事项"><a href="#二、注意事项" class="headerlink" title="二、注意事项"></a>二、注意事项</h2><ul><li><p><strong>引用捕获外部变量或者值捕获外部指针时，注意避免使用<code>悬空指针</code></strong></p></li><li><p><strong>大型对象尽量避免使用值捕获，拷贝开销大</strong></p></li><li><p><strong>不能直接递归，需使用<code>std::function</code>进行封装</strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>)&gt; factorial = [&amp;](<span class="hljs-type">int</span> n) &#123;<br>    <span class="hljs-built_in">return</span> (n &lt;= <span class="hljs-number">1</span>) ? <span class="hljs-number">1</span> : n * <span class="hljs-built_in">factorial</span>(n - <span class="hljs-number">1</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><code>C++14</code>以上参数支持<code>auto</code>声明</li></ul><h2 id="三、经典使用场景"><a href="#三、经典使用场景" class="headerlink" title="三、经典使用场景"></a>三、经典使用场景</h2><ul><li><code>STL</code>算法中的自定义操作</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br>std::<span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)&#123;<span class="hljs-keyword">return</span> a &gt; b;&#125;) <span class="hljs-comment">// 降序</span><br>v.<span class="hljs-built_in">erase</span>(std::<span class="hljs-built_in">remove_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span> x) &#123; <span class="hljs-keyword">return</span> x%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>; &#125;),v.<span class="hljs-built_in">end</span>());<span class="hljs-comment">// 过滤偶数</span><br></code></pre></td></tr></table></figure><ul><li>异步任务</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::thread <span class="hljs-title">t</span><span class="hljs-params">([&amp;]() &#123;std::cout &lt;&lt; <span class="hljs-string">&quot;Thread with captured vars\n&quot;</span>;&#125;)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>QT</code>中的槽函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">connect</span>(ui.btnClose, &amp;QPushButton::clicked, [&amp;]() &#123;<span class="hljs-built_in">close</span>(); &#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言与框架</category>
      
      <category>C++</category>
      
      <category>C++11</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++11 右值引用/移动语义/完美转发</title>
    <link href="/2025/06/17/C++11%2003%20%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%20l%20%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%20l%20%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91/"/>
    <url>/2025/06/17/C++11%2003%20%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%20l%20%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%20l%20%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="一、右值引用"><a href="#一、右值引用" class="headerlink" title="一、右值引用"></a>一、右值引用</h2><h3 id="1-什么是右值？"><a href="#1-什么是右值？" class="headerlink" title="1 什么是右值？"></a>1 什么是右值？</h3><ul><li><strong>左值（Lvalue）</strong>：具有持久状态的对象，可以取地址，通常有名称。</li><li><strong>右值（Rvalue）</strong>：临时对象或字面量，无法取地址，生命周期短暂。<ul><li><strong>纯右值（prvalue）</strong>：字面量、算术表达式结果、返回非引用的函数调用。</li><li><strong>将亡值（xvalue）</strong>：通过右值引用标记的对象（如 <code>std::move</code> 的结果）</li></ul></li></ul><p>&#x3D;&#x3D;注意：左右值引用声明时一定要初始化&#x3D;&#x3D;</p><h3 id="2-如何判断一个表达式是左值还是右值-？"><a href="#2-如何判断一个表达式是左值还是右值-？" class="headerlink" title="2 如何判断一个表达式是左值还是右值 ？"></a>2 如何判断一个表达式是左值还是右值 ？</h3><ul><li>可位于赋值号（&#x3D;）左边就是左值（左值也可以位于赋值号右边），<code>只能</code>位于赋值号右边的一定是右值</li><li>有名称、可寻址的即为左值，反之为右值</li></ul><p>&#x3D;&#x3D;注意：以上两个方法只使用于大部分情况&#x3D;&#x3D;</p><h3 id="3-右值引用在编程中，一般在什么地方使用？"><a href="#3-右值引用在编程中，一般在什么地方使用？" class="headerlink" title="3 右值引用在编程中，一般在什么地方使用？"></a>3 右值引用在编程中，一般在什么地方使用？</h3><ul><li>函数参数：最常见，一般用于实现移动语义和完美转发；</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-number">1.</span> <span class="hljs-built_in">MyClass</span>(MyClass&amp;&amp; other);\\ 移动构造函数<br><span class="hljs-number">2.</span> MyClass&amp; <span class="hljs-keyword">operator</span>=(MyClass&amp;&amp; other);\\ 移动赋值运算符<br><span class="hljs-number">3.</span> <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;                     \\ 泛型编程中的通用引用，比如实现完美转发时<br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(T&amp;&amp; param)</span></span><br></code></pre></td></tr></table></figure><ul><li>函数返回值：少见，可能会造成悬空引用问题，以前我一直认为右值引用是用来转移资源的，其实不是，它和左值引用一样都是需要引用具体的数据，它只是一个标记，告诉编译器它是右值，让编译器尝试调用移动构造函数或者移动赋值运算符（如何存在的话，这才是资源得以转移的原因），因此，函数返回值没必要设计为右值引用，设计为正常类型就行，如果符合移动语义，编译器自然会自动调用移动构造函数或者移动赋值函数（编译器的RVO或NRVO行为），将资源转移到函数返回时创建的临时变量中，从这里也不能看出，函数返回值默认就是右值，但它的类型不是T&amp;&amp;，而是T。</li></ul><h3 id="4-引用限定符"><a href="#4-引用限定符" class="headerlink" title="4 引用限定符"></a>4 引用限定符</h3><ul><li>无<code>const</code>修饰的成员函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">MyClass<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> &amp; </span>&#123;&#125;    <span class="hljs-comment">// 限定只能左值对象可以调用该函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display1</span><span class="hljs-params">()</span> &amp;&amp; </span>&#123;&#125;  <span class="hljs-comment">// 限定只能右值对象可以调用该函数</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>有<code>const</code>修饰的成员函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">MyClass<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> &amp; </span>&#123;&#125;    <span class="hljs-comment">// 左右值对象都可以调用该函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display1</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> &amp;&amp; </span>&#123;&#125;  <span class="hljs-comment">// 限定只能右值对象可以调用该函数</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-右值引用最大的用武之地"><a href="#5-右值引用最大的用武之地" class="headerlink" title="5 右值引用最大的用武之地"></a>5 右值引用最大的用武之地</h3><ul><li>移动语义</li><li>完美转发</li></ul><h2 id="二、移动语义"><a href="#二、移动语义" class="headerlink" title="二、移动语义"></a>二、移动语义</h2><h3 id="1-什么是移动语义？"><a href="#1-什么是移动语义？" class="headerlink" title="1 什么是移动语义？"></a>1 什么是移动语义？</h3><p>​移动语义指的就是以<code>移动而非深拷贝</code>的方式初始化含有指针、文件句柄等资源的类对象，通常是将临时对象（右值）资源移动为己用，减少拷贝开销，提升性能。</p><h3 id="2-移动语义的实现"><a href="#2-移动语义的实现" class="headerlink" title="2 移动语义的实现"></a>2 移动语义的实现</h3><p><code>移动构造函数</code>和<code>移动赋值运算符</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">MyClass</span>(MyClass&amp;&amp; other)&#123; &#125;；<br>MyClass&amp; <span class="hljs-keyword">operator</span>=(MyClass&amp;&amp; other) &#123;<br>    <span class="hljs-keyword">if</span> (&amp;other != <span class="hljs-keyword">this</span>)&#123; &#125;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-std-move"><a href="#3-std-move" class="headerlink" title="3 std::move"></a>3 std::move</h3><p>​<code>std::move</code>不是移动资源的作用，它的功能是将一个左值转为右值，<code>触发移动语义</code>。</p><h3 id="4-移动语义使用场景"><a href="#4-移动语义使用场景" class="headerlink" title="4 移动语义使用场景"></a>4 移动语义使用场景</h3><ul><li>资源管理类</li><li>大型对象和不可拷贝对象（<code>std::unique_str</code>、<code>std::mutex</code>）</li></ul><h2 id="三、完美转发"><a href="#三、完美转发" class="headerlink" title="三、完美转发"></a>三、完美转发</h2><h3 id="1-什么是完美转发？"><a href="#1-什么是完美转发？" class="headerlink" title="1 什么是完美转发？"></a>1 什么是完美转发？</h3><p>​在泛型编程中，将函数的参数以<strong>原始的值类别</strong>（左值或右值）转发给其他函数，确保目标函数能正确选择重载版本（如拷贝或移动语义）。</p><h3 id="2-完美转发实现关键点"><a href="#2-完美转发实现关键点" class="headerlink" title="2 完美转发实现关键点"></a>2 完美转发实现关键点</h3><ul><li>将通用引用（右值）作为模板函数的参数类型</li><li>使用<code>std::forward</code>传递参数，保持参数的左右值属性</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">auto</span>) <span class="hljs-title">CallFunc</span><span class="hljs-params">(T&amp;&amp; v)</span></span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">targetFunc</span>(std::forward&lt;T&gt;(v)); &#125;<br></code></pre></td></tr></table></figure><h3 id="3-移动语义使用场景"><a href="#3-移动语义使用场景" class="headerlink" title="3 移动语义使用场景"></a>3 移动语义使用场景</h3><ul><li>包装器函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span>... Args&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CallFunc</span><span class="hljs-params">(Args&amp;&amp;... args)</span></span>&#123;<span class="hljs-built_in">targetFunc</span>(std::forward&lt;Args&gt;(args)...);&#125;<br></code></pre></td></tr></table></figure><ul><li>工厂函数和对象创建</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span>...Args&gt;<br><span class="hljs-function"><span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">auto</span>) <span class="hljs-title">createObject</span><span class="hljs-params">(Args&amp;&amp;... args)</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">T</span>(std::forward&lt;Arsg&gt;(args)...);&#125;<br></code></pre></td></tr></table></figure><ul><li>中间层函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Func, <span class="hljs-keyword">typename</span>...Args&gt;<br><span class="hljs-function"><span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">auto</span>) <span class="hljs-title">logAndCall</span><span class="hljs-params">(Func&amp;&amp; func, Args&amp;&amp;...)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> std::forward&lt;Func&gt;(func)(std::forward&lt;Args&gt;(args)...);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言与框架</category>
      
      <category>C++</category>
      
      <category>C++11</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
